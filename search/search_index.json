{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the FastFuels Python SDK Documentation!","text":""},{"location":"#what-is-fastfuels","title":"What is FastFuels?","text":"<p>FastFuels is a cloud-based platform for generating forest inventory data. It uses a combination of satellite imagery and machine learning to generate tabular tree data and voxelized 3D fuel models. These data products can be used to support wildfire risk assessment, fire behavior modeling, and other applications.</p>"},{"location":"#what-is-the-fastfuels-python-sdk","title":"What is the FastFuels Python SDK?","text":"<p>The FastFuels Python SDK is a Python package that provides a convenient interface for interacting with the FastFuels API. It can be used to create and manage FastFuels resources. It can also be used to download and process generated data products.</p>"},{"location":"#installation","title":"Installation","text":"<p>The FastFuels Python SDK can be installed using <code>pip</code> or <code>conda</code>.</p>"},{"location":"#pip","title":"pip","text":"<pre><code>pip install fastfuels-sdk\n</code></pre>"},{"location":"#conda","title":"conda","text":"<p>Conda support is coming soon!</p>"},{"location":"#authentication","title":"Authentication","text":"<p>The FastFuels Python SDK uses API keys to authenticate requests. FastFuels is currently in development and is not yet available to the public. If you are interested in using FastFuels, please contact us at anthony@silvxlabs.com</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Users can import the FastFuels Python SDK into their Python scripts by using  the <code>fastfuels_sdk</code> package. During import, the SDK will attempt to load the user's API key from the <code>FASTFUELS_API_KEY</code> environment variable. If the environment variable is not set, the user will receive an error message.</p> <pre><code>import fastfuels_sdk\n</code></pre> <p>To set the API key, the user can either set the <code>FASTFUELS_API_KEY</code> environment variable in their shell, or directly in their Python script.</p>"},{"location":"#bash","title":"bash","text":"<pre><code>FASTFUELS_API_KEY=\"my-api-key\"\n</code></pre>"},{"location":"#python","title":"Python","text":"<pre><code>import os\nos.environ[\"FASTFUELS_API_KEY\"] = \"my-api-key\"\n</code></pre> <p>The  <code>create_dataset</code>  function is the primary entry point for creating FastFuels resources. It can be used to create a new dataset from a geojson file, or to retrieve an existing dataset from the FastFuels API.</p> <pre><code>import json\nfrom fastfuels_sdk import create_dataset\n\n# Load a geojson file\nwith open('path/to/geojson/file') as f:\n    geojson = json.load(f)\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n</code></pre>"},{"location":"#issues","title":"Issues","text":"<p>If you encounter any issues with the FastFuels Python SDK, please submit an issue on the GitHub repository.</p>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#create-a-dataset","title":"Create a Dataset","text":"<p>The core resource in the FastFuels SDK is the  Dataset.  A Dataset contains spatial data for generating FastFuels Treelists.</p> <p>The entry point for creating a  Dataset is the  <code>create_dataset</code> function. This</p>"},{"location":"how-to-guides/#using-a-geojson-file","title":"Using a GeoJSON file","text":"<pre><code>import json\nfrom fastfuels_sdk import create_dataset\n\n# Load a geojson file\nwith open('path/to/geojson/file') as f:\n    geojson = json.load(f)\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n</code></pre>"},{"location":"how-to-guides/#using-other-spatial-data-file-formats","title":"Using other spatial data file formats","text":"<pre><code>import json\nimport geopandas as gpd\nfrom fastfuels_sdk import create_dataset\n\n# Load a spatial data file\ngdf = gpd.read_file('path/to/spatial/data/file')\ngeojson = json.loads(gdf.to_json())\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n</code></pre>"},{"location":"how-to-guides/#create-a-treelist","title":"Create a Treelist","text":"<p>A Dataset is used to generate a  Treelist object with the <code>create_treelist</code> method.</p> <pre><code>import json\nfrom fastfuels_sdk import create_dataset\n\n# Load a geojson file\nwith open('path/to/geojson/file') as f:\n    geojson = json.load(f)\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n\n# Create a treelist from a dataset\ntreelist = dataset.create_treelist(name=\"my-treelist\",\n                                   description=\"My treelist description\")\n</code></pre>"},{"location":"how-to-guides/#treelist-status","title":"Treelist status","text":"<p>The  <code>create_treelist</code> method is asynchronous, and will return a  <code>Treelist</code> object with a status of <code>Queued</code>. Some operations, such as downloading the Treelist data, modifying the Treelist data, or creating a Fuelgrid require the Treelist to be in a <code>Finished</code> status. You can check the status of a Treelist using the <code>status</code> property.</p> <pre><code># Check the status of a treelist\nprint(treelist.status)\n</code></pre> <p>Additionally, you can wait for a Treelist to finish generating using the <code>wait_until_finished</code> method.</p> <pre><code># Wait for a treelist to finish generating\ntreelist.wait_until_finished()\n</code></pre>"},{"location":"how-to-guides/#simulate-a-silvicultural-treatment-on-a-treelist","title":"Simulate a silvicultural treatment on a Treelist","text":"<p>Once a  Treelist  has finished generating, you can access the Treelist data in a  DataFrame object by using the <code>get_data</code> method.</p> <pre><code># Get the treelist data\ndf = treelist.get_data()\ndf.head()\n</code></pre> <p>Some users may want to modify Treelist data to simulate different scenarios such as forest growth, silvicultural treatments, or natural disturbance such as  wildfire. The FastFuels SDK supports uploading custom data to the existing  Treelist resource. The custom data must be in the form of a DataFrame with the following columns: </p> <ul> <li>SPCD</li> <li>DIA_cm</li> <li>HT_m</li> <li>STATUSCD</li> <li>CBH_m</li> <li>X_m</li> <li>Y_m</li> </ul> <p>The following example simulates a silvicultural treatment by removing all  trees with a diameter at breast height (DIA_cm) less than 20.32cm (8 inches).  The Treelist data is then uploaded to the Treelist resource using the  <code>update_data</code> method for further use in the FastFuels SDK.</p> <pre><code>import json\nfrom fastfuels_sdk import create_dataset\n\n# Load a geojson file\nwith open('path/to/geojson/file') as f:\n    geojson = json.load(f)\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n\n# Create a treelist from a dataset\ntreelist = dataset.create_treelist(name=\"my-treelist\",\n                                   description=\"My treelist description\")\n\n# Wait for a treelist to finish generating\ntreelist.wait_until_finished(verbose=True)\n\n# Get the treelist data\ndf = treelist.get_data()\n\n# Remove trees with diameter less than 20.32cm (8 inches)\ndf = df[df['DIA_cm'] &gt;= 20.32]\n\n# Upload the modified treelist data\ntreelist.update_data(df, inplace=True)\n</code></pre>"},{"location":"how-to-guides/#create-a-fuelgrid","title":"Create a Fuelgrid","text":"<p>Treelist  objects can be used to generate a  Fuelgrid , or a 3D voxelized fuel model. The Fuelgrid is generated using the  <code>create_fuelgrid</code> method. The Fuelgrid generation process is asynchronous, and will return a Fuelgrid object with a status of <code>Queued</code>. Some operations, such as downloading the Fuelgrid data, require the Fuelgrid to be in a <code>Finished</code> status.</p> <pre><code>import json\nfrom fastfuels_sdk import create_dataset\n\n# Load a geojson file\nwith open('path/to/geojson/file') as f:\n    geojson = json.load(f)\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n\n# Create a treelist from a dataset\ntreelist = dataset.create_treelist(name=\"my-treelist\",\n                                   description=\"My treelist description\")\n\n# Wait for a treelist to finish generating\ntreelist.wait_until_finished(verbose=True)\n\n# Create a fuelgrid from a treelist\nfuelgrid = treelist.create_fuelgrid(name=\"my-fuelgrid\",\n                                    description=\"My fuelgrid description\",\n                                    distribution_method=\"realistic\",\n                                    horizontal_resolution=1,\n                                    vertical_resolution=1,\n                                    border_pad=0)\n</code></pre>"},{"location":"how-to-guides/#modify-fuelgrid-data","title":"Modify Fuelgrid data","text":"<p>Some users may want to modify  Fuelgrid  data to simulate different scenarios such as saw line along a road or fireline, 3D fuel treatments, or blackline operations. </p> <p>Users should note that Fuelgrid data is stored in a compressed format, and  cannot modify the data directly. Instead, users should download the Fuelgrid data using the  <code>download_zarr</code> method and copy the data to a new, mutable zarr store.</p> <pre><code>import zarr\nimport json\nfrom fastfuels_sdk import create_dataset\n\n# Load a geojson file\nwith open('path/to/geojson/file') as f:\n    geojson = json.load(f)\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n\n# Create a treelist from a dataset\ntreelist = dataset.create_treelist(name=\"my-treelist\",\n                                   description=\"My treelist description\")\n\n# Wait for a treelist to finish generating\ntreelist.wait_until_finished(verbose=True)\n\n# Create a fuelgrid from a treelist\nfuelgrid = treelist.create_fuelgrid(name=\"my-fuelgrid\",\n                                    description=\"My fuelgrid description\",\n                                    distribution_method=\"realistic\",\n                                    horizontal_resolution=1,\n                                    vertical_resolution=1,\n                                    border_pad=0)\n\n# Wait for a fuelgrid to finish generating\nfuelgrid.wait_until_finished(verbose=True)\n\n# Download the Fuelgrid zarr data\nfuelgrid.download_zarr('path/to/fuelgrid.zip')\n\n# Load the immutable zarr store\nzarr_immutable = zarr.open('path/to/fuelgrid.zip', mode='r')\n\n# Create a mutable zarr store\nzarr_mutable = zarr.open('path/to/fuelgrid_mutable.zarr', mode='w')\n\n# Copy the data from the immutable zarr store to the mutable zarr store\nzarr.copy_all(zarr_immutable, zarr_mutable)\n\n# Remove canopy fuels in the saw line mask\nzarr_mutable['canopy']['bulk-density'][saw_line_mask] = 0\nzarr_mutable['canopy']['FMC'][saw_line_mask] = 0\nzarr_mutable['canopy']['SAV'][saw_line_mask] = 0\n\n# Remove surface fuels from the blackline operation mask\nzarr_mutable['surface']['bulk-density'][blackline_mask] = 0\nzarr_mutable['surface']['fuel-depth'][blackline_mask] = 0\nzarr_mutable['surface']['SAV'][blackline_mask] = 0\nzarr_mutable['surface']['FMC'][blackline_mask] = 0\n</code></pre>"},{"location":"how-to-guides/#export-voxelized-fuels-to-fire-model-inputs","title":"Export Voxelized Fuels to Fire Model Inputs","text":""},{"location":"how-to-guides/#quic-fire","title":"QUIC-fire","text":"<pre><code>import zarr\nimport json\nfrom fastfuels_sdk import create_dataset, export_zarr_to_quicfire\n\n# Load a geojson file\nwith open('path/to/geojson/file') as f:\n    geojson = json.load(f)\n\n# Create a dataset\ndataset = create_dataset(name=\"my-dataset\",\n                         description=\"My dataset description\",\n                         spatial_data=geojson)\n\n# Create a treelist from a dataset\ntreelist = dataset.create_treelist(name=\"my-treelist\",\n                                   description=\"My treelist description\")\n\n# Wait for a treelist to finish generating\ntreelist.wait_until_finished(verbose=True)\n\n# Create a fuelgrid from a treelist\nfuelgrid = treelist.create_fuelgrid(name=\"my-fuelgrid\",\n                                    description=\"My fuelgrid description\",\n                                    distribution_method=\"realistic\",\n                                    horizontal_resolution=1,\n                                    vertical_resolution=1,\n                                    border_pad=0)\n\n# Wait for a fuelgrid to finish generating\nfuelgrid.wait_until_finished(verbose=True)\n\n# Download the Fuelgrid zarr data\nfuelgrid.download_zarr('path/to/fuelgrid.zip')\n\n# Export the Fuelgrid zarr data to QUIC-fire inputs\nzroot = zarr.open('path/to/fuelgrid.zip', mode='r')\nexport_zarr_to_quicfire(zroot, 'path/to/quicfire/inputs')\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#fastfuels_sdk.create_dataset","title":"<code>fastfuels_sdk.create_dataset(name, description, spatial_data, tags=None)</code>","text":"<p>Creates a new FastFuels Dataset. A Dataset is the primary object for storing spatial data in the FastFuels API. The primary role of a Dataset is to store spatial data and to provide a container for Treelists and Fuelgrids. All data products generated by FastFuels are associated with a Dataset.</p> <p>Dataset spatial data can be provided as a GeoJSON dictionary. The spatial data must be a valid GeoJSON FeatureCollection object.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>Name of the dataset.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>Description of the dataset.</p> </li> <li> spatial_data             (<code>dict</code>)         \u2013          <p>Spatial data for the dataset as a GeoJSON FeatureCollection object.</p> </li> <li> tags             (<code>list</code>, default:                 <code>None</code> )         \u2013          <p>Tags for the dataset, by default None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dataset</code>         \u2013          <p>Dataset object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an error.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.Dataset","title":"<code>fastfuels_sdk.Dataset</code>","text":"<p>             Bases: <code>FastFuelsResource</code></p> <p>Class representing the Dataset resource in the FastFuels API. It represents a collection of spatial data, TreeList, and Fuelgrid resources, alongside associated metadata. The spatial data stored in the Dataset resource is used to generate Treelists and Fuelgrids.</p>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.__init__","title":"<code>__init__(id, name, description, created_on, spatial_data, tags, fvs_variant, version, treelists, fuelgrids)</code>","text":"<p>Initialize a Dataset object.</p> <p>Parameters:</p> <ul> <li> id             (<code>str</code>)         \u2013          <p>The unique identifier for the dataset.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The name of the dataset.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>A description of the dataset.</p> </li> <li> created_on             (<code>str</code>)         \u2013          <p>The date and time the dataset was created.</p> </li> <li> spatial_data             (<code>dict</code>)         \u2013          <p>The spatial data for the dataset.</p> </li> <li> tags             (<code>list[str]</code>)         \u2013          <p>A list of tags for the dataset.</p> </li> <li> fvs_variant             (<code>str</code>)         \u2013          <p>The FVS variant used to generate the dataset.</p> </li> <li> version             (<code>str</code>)         \u2013          <p>The version of FastFuels used to create the dataset. The data is read in ISO 8601 format and converted to a datetime object.</p> </li> <li> treelists             (<code>list[str]</code>)         \u2013          <p>A list of treelist IDs associated with the dataset.</p> </li> <li> fuelgrids             (<code>list[str]</code>)         \u2013          <p>A list of Fuelgrid IDs associated with the dataset.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.create_treelist","title":"<code>create_treelist(name, description='', method='random')</code>","text":"<p>Create a new Treelist resource associated with the current Dataset.</p> <p>This method creates a new Treelist from the spatial bounding box of the current Dataset. A Treelist resource contains metadata about the Treelist and associated Fuelgrid resources. Once a Treelist resource is created and enters the \"Finished\" status, the data can be accessed as a Pandas DataFrame through the get_treelist_data() method.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to assign to the new Treelist.</p> </li> <li> description             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>A description of the new Treelist. Defaults to an empty string.</p> </li> <li> method             (<code>str</code>, default:                 <code>'random'</code> )         \u2013          <p>The method to use for generating the Treelist. Currently, only \"random\" is supported. Defaults to \"random\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Treelist</code>         \u2013          <p>The new Treelist object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an error when creating the Treelist.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.delete","title":"<code>delete()</code>","text":"<p>Deletes the current Dataset instance along with all its associated Treelists and Fuelgrids.</p> <p>This method performs a recursive deletion operation, meaning that it not only deletes the Dataset object itself, but also all associated Treelist and Fuelgrid objects linked to this Dataset. This operation is irreversible and leads to the permanent removal of all related data from the FastFuels API.</p> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the FastFuels API returns an error when attempting to delete the Dataset resource and its associated Treelists and Fuelgrids.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.delete_fuelgrids","title":"<code>delete_fuelgrids()</code>","text":"<p>Deletes all Fuelgrid resources associated with the current Dataset.</p> <p>This method sends a request to the FastFuels API to delete all Fuelgrid resources that are associated with the current Dataset. Please note that this operation is irreversible and all data associated with the Fuelgrids will be permanently deleted.</p> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the FastFuels API returns an error when attempting to delete the Fuelgrid resources.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.delete_treelists","title":"<code>delete_treelists()</code>","text":"<p>Delete all Treelist resources associated with the current Dataset.</p> <p>This method sends a request to the FastFuels API to delete all Treelist resources that are associated with the current Dataset. This is a recursive delete operation and will also remove all Fuelgrids associated with each Treelist.</p> <p>Please note that the operation is irreversible and all data associated with the Treelists and Fuelgrids will be lost.</p> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the FastFuels API returns an error when attempting to delete the Treelist resources.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.list_fuelgrids","title":"<code>list_fuelgrids()</code>","text":"<p>Retrieve a list of all Fuelgrid resources associated with the current Dataset.</p> <p>This method fetches all Fuelgrids that are associated with the current Dataset from the FastFuels API and returns them as a list of Fuelgrid objects.</p> <p>Returns:</p> <ul> <li> <code>list[Fuelgrid]</code>         \u2013          <p>A list of Fuelgrid objects associated with the current Dataset. If no Fuelgrids are associated with the Dataset, returns an empty list.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the FastFuels API returns an error when attempting to retrieve the list of Fuelgrid resources.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.list_treelists","title":"<code>list_treelists()</code>","text":"<p>Retrieve a list of all Treelist resources associated with the current Dataset.</p> <p>This method fetches all Treelists that are associated with the current Dataset from the FastFuels API and returns them as a list of Treelist objects.</p> <p>Returns:</p> <ul> <li> <code>list[Treelist]</code>         \u2013          <p>A list of Treelist objects associated with the current Dataset. If no Treelists are associated with the Dataset, returns an empty list.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the FastFuels API returns an error when attempting to retrieve the list of Treelist resources.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.refresh","title":"<code>refresh(inplace=False)</code>","text":"<p>Returns an up-to-date snapshot of the dataset resource. This method corresponds to the GET /datasets/{id} endpoint for an existing Dataset resource.</p> <p>If inplace is True, the current Dataset object will be updated with the new values. Otherwise, a new Dataset object will be returned.</p> <p>Returns:</p> <ul> <li> <code>Dataset or None</code>         \u2013          <p>Dataset object if inplace is True, otherwise None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an error.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.datasets.Dataset.update","title":"<code>update(name=None, description=None, tags=None, inplace=False)</code>","text":"<p>Update a Dataset resource. The attributes that can be updated are name, description, and tags. The spatial data cannot be updated for an existing Dataset.</p> <p>If inplace is True, the current Dataset object will be updated with the new values. Otherwise, a new Dataset object will be returned.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>Name of the dataset to update, by default None.</p> </li> <li> description             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>Description of the dataset to update, by default None.</p> </li> <li> tags             (<code>list</code>, default:                 <code>None</code> )         \u2013          <p>Tags for the dataset to update, by default None.</p> </li> <li> inplace             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to update the dataset object in place, or return a new dataset object. By default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dataset</code>         \u2013          <p>Updated Dataset object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an error.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.Treelist","title":"<code>fastfuels_sdk.Treelist</code>","text":"<p>             Bases: <code>FastFuelsResource</code></p> <p>Treelist class for the FastFuels SDK.</p> <p>A treelist represents a collection of individual trees distributed on a landscape. It provides methods to interact with treelist resources, such as retrieving data, updating attributes, creating fuelgrids, and more.</p>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.__init__","title":"<code>__init__(id, name, description, method, dataset_id, status, created_on, summary, fuelgrids, version)</code>","text":"<p>Initialize a Treelist object.</p> <p>Parameters:</p> <ul> <li> id             (<code>str</code>)         \u2013          <p>The unique identifier of the treelist.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The name of the treelist.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The description of the treelist.</p> </li> <li> method             (<code>str</code>)         \u2013          <p>Method used to distribute trees on the landscape.</p> </li> <li> dataset_id             (<code>str</code>)         \u2013          <p>The unique identifier of the dataset the treelist belongs to.</p> </li> <li> status             (<code>str</code>)         \u2013          <p>Status of the treelist at the time of the request. Note that the status of a treelist can change after the request.</p> </li> <li> created_on             (<code>str</code>)         \u2013          <p>The date and time the treelist was created. The data is read in ISO 8601 format and converted to a datetime object.</p> </li> <li> summary             (<code>dict</code>)         \u2013          <p>A dictionary containing summary statistics for the treelist.</p> </li> <li> fuelgrids             (<code>list[str]</code>)         \u2013          <p>A list of the IDs of the fuelgrids created from the treelist.</p> </li> <li> version             (<code>str</code>)         \u2013          <p>The version of standgen used to generate the treelist.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.create_fuelgrid","title":"<code>create_fuelgrid(name, description, distribution_method, horizontal_resolution, vertical_resolution, border_pad, surface_fuel_source='LF_SB40', surface_interpolation_method='nearest')</code>","text":"<p>Creates a Fuelgrid object from a Treelist object. A fuelgrid represents a voxelized 3D representation of a treelist.</p> <p>This method creates a fuelgrid by transforming the treelist into a 3D spatial grid with fuel attributes. The grid's dimensions are defined by horizontal and vertical resolutions.</p> <p>There is a slight discrepancy between the spatial extent of the fuelgrid and the spatial extent of the Dataset. The fuelgrid spatial extent is rounded to the nearest multiple of the horizontal resolution to ensure that all grid cells are of uniform size.</p> <p>Individual trees may extend beyond the Fuelgrid spatial extent. If this is the case, the canopy of the tree will be cut off at the edge of the Fuelgrid. This can be avoided by increasing the border_pad.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The desired name for the fuelgrid.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>A brief description of the fuelgrid.</p> </li> <li> distribution_method             (<code>str</code>)         \u2013          <p>The method used for distributing the fuel data. Current supported methods include \"uniform\", \"random\", and \"realistic\".</p> </li> <li> horizontal_resolution             (<code>float</code>)         \u2013          <p>The desired horizontal resolution of the fuelgrid in meters.</p> </li> <li> vertical_resolution             (<code>float</code>)         \u2013          <p>The desired vertical resolution of the fuelgrid in meters.</p> </li> <li> border_pad             (<code>float</code>)         \u2013          <p>The amount of padding (in meters) to add to the border of the fuelgrid. This padding can help prevent voxelized trees from being cut off if they intersect with the border of the domain.</p> </li> <li> surface_fuel_source             (<code>str</code>, default:                 <code>'LF_SB40'</code> )         \u2013          <p>The source of the surface fuel data. Currently, only \"LF_SB40\" is supported. Defaults to \"LF_SB40\".</p> </li> <li> surface_interpolation_method             (<code>str</code>, default:                 <code>'nearest'</code> )         \u2013          <p>The interpolation method used for surface fuel data. \"nearest\", \"zipper\", \"linear\", and \"cubic\" are currently supported. Defaults to \"nearest\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Fuelgrid</code>         \u2013          <p>A Fuelgrid object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an unsuccessful status code.</p> </li> <li> <code>ValueError</code>           \u2013          <p>If surface_fuel_source is not \"LF_SB40\".</p> </li> <li> <code>ValueError</code>           \u2013          <p>If surface_interpolation_method is not \"nearest\", \"zipper\", \"linear\", or \"cubic\".</p> </li> <li> <code>ValueError</code>           \u2013          <p>If distribution_method is not \"uniform\", \"random\", or \"realistic\".</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.delete","title":"<code>delete()</code>","text":"<p>Delete the current Treelist instance. The deletion is permanent and cannot be undone.</p> <p>Note: This is a recursive delete that will remove all Fuelgrids associated with the Treelist.</p> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an unsuccessful status code. This could happen if the treelist does not exist, or if there is a server error.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.delete_fuelgrids","title":"<code>delete_fuelgrids()</code>","text":"<p>Delete all Fuelgrid objects associated with the current Treelist instance.</p> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          <p>Deletes fuelgrids in place.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an unsuccessful status code.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.get_data","title":"<code>get_data()</code>","text":"<p>Retrieves the treelist data as a pandas DataFrame.</p> <p>Each row in the DataFrame represents a unique tree, and each column corresponds to a tree attribute. The DataFrame includes the following columns:</p> <ul> <li>'SPCD': FIA Species code</li> <li>'DIA_cm': Tree diameter at breast height, measured in centimeters</li> <li>'HT_m': Tree height, measured in meters</li> <li>'STATUSCD': FIA Status code</li> <li>'CBH_m': Tree crown base height, measured in meters</li> <li>'X_m': Tree X coordinate, based on the EPSG:5070 crs, in meters</li> <li>'Y_m': Tree Y coordinate, based on the EPSG:5070 crs, in meters</li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>A pandas DataFrame containing the treelist data.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the FastFuels API returns an unsuccessful status code.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.list_fuelgrids","title":"<code>list_fuelgrids()</code>","text":"<p>List all Fuelgrid objects associated with the current Treelist instance.</p> <p>Returns:</p> <ul> <li> <code>list[Fuelgrid]</code>         \u2013          <p>List of Fuelgrid objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an unsuccessful status code.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.refresh","title":"<code>refresh(inplace=False)</code>","text":"<p>Refresh the Treelist object with the latest data from the server.</p> <p>Parameters:</p> <ul> <li> inplace             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to update the treelist object in place, or return a new treelist object, by default False</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Treelist | None</code>         \u2013          <p>A new Treelist object if inplace is False, otherwise None.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.update","title":"<code>update(name=None, description=None, inplace=False)</code>","text":"<p>Update a treelist resource. The attributes that can be updated are name and description.</p> <p>If inplace is True, the current Treelist object will be updated with the new values. Otherwise, a new Treelist object will be returned.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>Name of the treelist to update, by default None.</p> </li> <li> description             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>Description of the treelist to update, by default None.</p> </li> <li> inplace             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to update the treelist object in place, or return a new treelist object. By default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Treelist | None</code>         \u2013          <p>A new Treelist object if inplace is False, otherwise None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an error.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.update_data","title":"<code>update_data(data, inplace=False)</code>","text":"<p>Allows a user to upload a custom .csv or .parquet file to update an existing treelist resource. Note that trees outside the spatial bounding box of the dataset will be removed.</p> <p>The custom treelist data must contain the following columns:  - 'SPCD'  - 'DIA_cm'  - 'HT_m'  - 'STATUSCD'  - 'CBH_m'  - 'X_m',  - 'Y_m'</p> <p>The following columns are optional, and if present, will replace default values during the voxelization process:  - 'FOLIAGE_WEIGHT_kg'  - 'CROWN_VOLUME_m3'  - 'CROWN_RADIUS_m'</p> <p>Parameters:</p> <ul> <li> data             (<code>DataFrame</code>)         \u2013          <p>A Pandas DataFrame containing the custom treelist data.</p> </li> <li> inplace             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to update the treelist object in place, or return a new treelist object. By default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Treelist | None</code>         \u2013          <p>A new Treelist object if inplace is False, otherwise None.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.treelists.Treelist.wait_until_finished","title":"<code>wait_until_finished(step=5, timeout=600, inplace=True, verbose=False)</code>","text":"<p>Wait until the treelist resource has status \"Finished\".</p> <p>Parameters:</p> <ul> <li> step             (<code>float</code>, default:                 <code>5</code> )         \u2013          <p>The time in seconds to wait between checking the status of the tree list, by default 5 seconds.</p> </li> <li> timeout             (<code>float</code>, default:                 <code>600</code> )         \u2013          <p>The time in seconds to wait before raising a TimeoutError, by default 600 seconds (10 minutes). Note that the timeout is different from the timeout used in the API. Just because the timeout is reached here does not mean that the treelist has failed.</p> </li> <li> inplace             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to refresh the treelist object in place, or return a new treelist object. By default, False.</p> </li> <li> verbose             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to print the status of the treelist, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Treelist | None</code>         \u2013          <p>If inplace is False, returns a new treelist object. Otherwise, returns None and updates the existing treelist object in place.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.Fuelgrid","title":"<code>fastfuels_sdk.Fuelgrid</code>","text":"<p>             Bases: <code>FastFuelsResource</code></p> <p>Fuelgrid class for the FastFuels SDK.</p>"},{"location":"reference/#fastfuels_sdk.fuelgrids.Fuelgrid.__init__","title":"<code>__init__(id, dataset_id, treelist_id, name, description, surface_fuel_source, surface_interpolation_method, distribution_method, horizontal_resolution, vertical_resolution, border_pad, status, created_on, version, outputs)</code>","text":"<p>Initialize a Fuelgrid object.</p> <p>Parameters:</p> <ul> <li> id             (<code>str</code>)         \u2013          <p>The unique identifier for the fuelgrid.</p> </li> <li> dataset_id             (<code>str</code>)         \u2013          <p>The unique identifier for the dataset used to create the fuelgrid.</p> </li> <li> treelist_id             (<code>str</code>)         \u2013          <p>The unique identifier for the treelist used to create the fuelgrid.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>The name of the fuelgrid.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>The description of the fuelgrid.</p> </li> <li> surface_fuel_source             (<code>str</code>)         \u2013          <p>The surface fuel source used to create the fuelgrid.</p> </li> <li> surface_interpolation_method             (<code>str</code>)         \u2013          <p>The surface interpolation method used to create the fuelgrid.</p> </li> <li> distribution_method             (<code>str</code>)         \u2013          <p>The distribution method used to create the fuelgrid.</p> </li> <li> horizontal_resolution             (<code>float</code>)         \u2013          <p>The horizontal resolution of the fuelgrid.</p> </li> <li> vertical_resolution             (<code>float</code>)         \u2013          <p>The vertical resolution of the fuelgrid.</p> </li> <li> border_pad             (<code>float</code>)         \u2013          <p>The border pad of the fuelgrid.</p> </li> <li> status             (<code>str</code>)         \u2013          <p>The status of the fuelgrid.</p> </li> <li> created_on             (<code>str</code>)         \u2013          <p>The date and time the fuelgrid was created. The data is read in ISO 8601 format and converted to a datetime object.</p> </li> <li> version             (<code>str</code>)         \u2013          <p>The version of treevox used to generate the fuelgrid.</p> </li> <li> outputs             (<code>dict</code>)         \u2013          <p>The outputs of the fuelgrid.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.fuelgrids.Fuelgrid.delete","title":"<code>delete()</code>","text":"<p>Delete the fuelgrid.</p> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an unsuccessful status code.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.fuelgrids.Fuelgrid.download_zarr","title":"<code>download_zarr(fpath)</code>","text":"<p>Stream fuel grid 3D array data to a binary zarr file</p> <p>Parameters:</p> <ul> <li> fpath             (<code>Path | str</code>)         \u2013          </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          <p>File is saved to disk.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an unsuccessful status code.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.fuelgrids.Fuelgrid.refresh","title":"<code>refresh(inplace=False)</code>","text":"<p>Refresh the Fuelgrid object with the latest data from the server.</p> <p>Parameters:</p> <ul> <li> inplace             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to update the Fuelgrid object in place, or return a new Fuelgrid object, by default False</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Fuelgrid | None</code>         \u2013          <p>A new Fuelgrid object if inplace is False, otherwise None.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.fuelgrids.Fuelgrid.update","title":"<code>update(name=None, description=None, inplace=False)</code>","text":"<p>Update the name and description of the fuelgrid.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>The new name of the fuelgrid.</p> </li> <li> description             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>The new description of the fuelgrid.</p> </li> <li> inplace             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, the fuelgrid object is updated in place. If False, a new fuelgrid object is returned. Default is False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Fuelgrid | None</code>         \u2013          <p>If inplace is False, returns a new Fuelgrid object. Otherwise, returns None and updates the existing fuelgrid object in place.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>           \u2013          <p>If the API returns an unsuccessful status code.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.fuelgrids.Fuelgrid.wait_until_finished","title":"<code>wait_until_finished(step=5, timeout=600, inplace=False, verbose=False)</code>","text":"<p>Wait until the fuelgrid resource is finished.</p> <p>Parameters:</p> <ul> <li> step             (<code>float</code>, default:                 <code>5</code> )         \u2013          <p>The time in seconds to wait between checking the status of the Fuelgrid, by default 5 seconds.</p> </li> <li> timeout             (<code>float</code>, default:                 <code>600</code> )         \u2013          <p>The time in seconds to wait before raising a TimeoutError, by default 600 seconds (10 minutes). Note that the timeout is different from the timeout used in the API. Just because the timeout is reached here does not mean that the Fuelgrid resource has failed.</p> </li> <li> inplace             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to update the Fuelgrid object in place, or return a new fuelgrid object. By default, False.</p> </li> <li> verbose             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to print the status of the Fuelgrid, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Fuelgrid | None</code>         \u2013          <p>If inplace is False, returns a new Fuelgrid object. Otherwise, returns None and updates the existing fuelgrid object in place.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk.FastFuelsResource","title":"<code>fastfuels_sdk.FastFuelsResource</code>","text":"<p>Base class for all FastFuels resources. It provides methods for serializing and deserializing instances to and from JSON and dictionaries.</p>"},{"location":"reference/#fastfuels_sdk._base.FastFuelsResource.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create an instance of the class from a dictionary.</p> <p>Parameters:</p> <ul> <li> data             (<code>dict</code>)         \u2013          <p>The dictionary representing an instance of the class.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>FastFuelsResource</code>         \u2013          <p>The instance created from the dictionary.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk._base.FastFuelsResource.from_json","title":"<code>from_json(json_str)</code>  <code>classmethod</code>","text":"<p>Create an instance of the class from a JSON string.</p> <p>Parameters:</p> <ul> <li> json_str             (<code>str</code>)         \u2013          <p>The JSON string representing an instance of the class.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>FastFuelsResource</code>         \u2013          <p>The instance created from the JSON string.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk._base.FastFuelsResource.to_dict","title":"<code>to_dict()</code>","text":"<p>Return the instance as a dictionary.</p> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>The instance as a dictionary.</p> </li> </ul>"},{"location":"reference/#fastfuels_sdk._base.FastFuelsResource.to_json","title":"<code>to_json()</code>","text":"<p>Serialize the instance into a JSON string.</p> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The instance serialized into a JSON string.</p> </li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#fastfuels-resources","title":"FastFuels Resources","text":"<p>FastFuels is a Python SDK for generating synthetic forest fuels data. The SDK connects to a FastFuels API and communicates with it using a REST protocol. The API defines a set of endpoints for creating and managing FastFuels data in the form of three resources: Dataset, Treelist, and Fuelgrid. In brief, a Dataset is a collection of spatial data, a Treelist is a collection of trees, and a Fuelgrid is a collection of fuel cells. The SDK provides convenience methods for creating and managing these resources.</p>"},{"location":"tutorials/#dataset","title":"Dataset","text":"<p>A Dataset is a collection of spatial data. The spatial data is used to query data products for generating Treelists and Fuelgrids.</p> <p>Dataset resources also maintain connections to Treelist and Fuelgrid resources that are generated from the Dataset's spatial data. This allows for easy access to Treelist and Fuelgrid resources that are generated from the same spatial data.</p>"},{"location":"tutorials/#treelist","title":"Treelist","text":"<p>A Treelist is a collection of trees. Trees are populated in a Treelist by querying the  TreeMap  and  FIA Database products using the spatial data from a Dataset resource. A Treelist maintains a reference to a tabular data structure that contains information about the trees in the Treelist. </p>"},{"location":"tutorials/#dataframe","title":"DataFrame","text":"<p>Trees are stored in a  pandas DataFrame, which is a two-dimensional, size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). Each row in the DataFrame represents a unique tree on the landscape. Columns of the DataFrame are as follows:</p> <ul> <li> <p><code>SPCD</code>: FIA Species code. This is an identifier for the species of the tree according to the Forest Inventory and Analysis (FIA) program of the U.S. Forest Service.</p> </li> <li> <p><code>DIA_cm</code>: Tree Diameter at Breast Height (DBH). This is a standard forestry measurement representing the diameter of the tree's trunk at a standard height of 1.3 meters (or 4.5 feet) above ground level. In this dataset, the DBH is measured in centimeters.</p> </li> <li> <p><code>HT_m</code>: Tree height. The total height of the tree, measured in meters.</p> </li> <li> <p><code>STATUSCD</code>: FIA Status code. This code indicates the status of the tree (e.g., whether it's alive, dead, or has been cut down) as per the FIA's coding system.</p> </li> <li> <p><code>CBH_m</code>: Tree Crown Base Height. This represents the height above ground level at which the tree's crown (branches and leaves) starts. In this dataset, the crown base height is measured in meters.</p> </li> <li> <p><code>X_m</code> and <code>Y_m</code>: These are the tree's projected coordinates in meters. Projections are in the EPSG:5070 coordinate reference system, which is a standard projection for the conterminous United States.</p> </li> </ul>"},{"location":"tutorials/#fuelgrid","title":"Fuelgrid","text":"<p>A Fuelgrid is a collection of 3D fuel cells. Fuelgrids are voxelized  representations of the landscape that contain canopy and surface fuel information for use in fire behavior models. Fuelgrids are generated using the individual trees in a Treelist and the spatial data of a Dataset resource. Fuelgrid canopy data comes from voxelizing the trees in a Treelist, and surface fuel data comes from querying the  LANDFIRE 40 Scott and Burgan Fire Behavior Fuel Models product using the spatial data from a Dataset resource.</p> <p>Additionally, surface fuel data can be modified using  DUET to account for the distribution of leaf litter based on tree canopy structure. The SDK provides functionality for exporting Fuelgrid data to DUET input files.</p>"},{"location":"tutorials/#zarr","title":"Zarr","text":"<p>A Fuelgrid maintains a reference to a  zarr array group that contains the 3D canopy and 2D surface fuel data. The zarr array group is organized as follows:</p> <pre><code>/\n \u251c\u2500\u2500 canopy\n \u2502   \u251c\u2500\u2500 FMC; float32; Fuel moisture content, in percent\n \u2502   \u251c\u2500\u2500 SAV; float32; Surface area to volume ratio, in 1/m\n \u2502   \u251c\u2500\u2500 bulk-density; float32; Canopy bulk density, in kg/m^3\n \u2502   \u2514\u2500\u2500 species-code; uint16; FIA species code for the dominant voxel species\n \u2514\u2500\u2500 surface\n     \u251c\u2500\u2500 DEM; float32; Digital Elevation Model, in meters\n     \u251c\u2500\u2500 FMC; float32; Fuel moisture content, in percent\n     \u251c\u2500\u2500 SAV; float32; Surface area to volume ratio, in 1/m\n     \u251c\u2500\u2500 bulk-density; float32; Surface fuel bulk density, in kg/m^3\n     \u2514\u2500\u2500 fuel-depth; float32; Surface fuel depth (or height), in meters\n</code></pre> <p>An in-depth tutorial for interacting with Fuelgrid data in the zarr format can be found here.</p> <p>In addition to the above data hierarchy, zarr Fuelgrids also contain metadata in an <code>attrs</code> dictionary. The <code>attrs</code> dictionary contains the following:</p> <ul> <li><code>dx</code>: The x-axis resolution of the Fuelgrid, in meters</li> <li><code>dy</code>: The y-axis resolution of the Fuelgrid, in meters</li> <li><code>dz</code>: The z-axis resolution of the Fuelgrid, in meters</li> <li><code>nx</code>: The number of cells in the x-axis of the Fuelgrid</li> <li><code>ny</code>: The number of cells in the y-axis of the Fuelgrid</li> <li><code>nz</code>: The number of cells in the z-axis of the Fuelgrid</li> <li><code>pad</code>: The number of cells to pad the Fuelgrid with in each direction</li> <li><code>xmax</code>: The maximum x-coordinate of the Fuelgrid, in meters</li> <li><code>xmin</code>: The minimum x-coordinate of the Fuelgrid, in meters</li> <li><code>ymax</code>: The maximum y-coordinate of the Fuelgrid, in meters</li> <li><code>ymin</code>: The minimum y-coordinate of the Fuelgrid, in meters</li> <li><code>zmax</code>: The maximum z-coordinate of the Fuelgrid, in meters</li> <li><code>zmin</code>: The minimum z-coordinate of the Fuelgrid, in meters</li> </ul> <p>The 2D affine transformation matrix is not currently stored in the  attributes dictionary, but can be created as follows:</p> <pre><code>import numpy as np\n\ndx, dy = fuelgrid.attrs['dx'], fuelgrid.attrs['dy']\nxmin, ymin = fuelgrid.attrs['xmin'], fuelgrid.attrs['ymin']\n\naffine = np.array([[dx, 0, xmin - dx/2], \n                   [0, dy, ymin - dy/2], \n                   [0, 0, 1]])\n</code></pre> <p>Note that all spatial coordinates use the EPSG:5070 coordinate reference system.</p>"}]}